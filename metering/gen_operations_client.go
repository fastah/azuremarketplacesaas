//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package metering

import (
	"context"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
)

// OperationsClient contains the methods for the MeteringOperations group.
// Don't use this type directly, use a constructor function instead.
type OperationsClient struct {
	internal *azcore.Client
}

// PostBatchUsageEvent - The batch usage event API allows you to emit usage events for more than one purchased entity at once.
// The batch usage event request references the metering services dimension defined by the publisher
// when publishing the offer.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2018-08-31
//   - options - OperationsClientPostBatchUsageEventOptions contains the optional parameters for the OperationsClient.PostBatchUsageEvent
//     method.
func (client *OperationsClient) PostBatchUsageEvent(ctx context.Context, body BatchUsageEvent, options *OperationsClientPostBatchUsageEventOptions) (OperationsClientPostBatchUsageEventResponse, error) {
	var err error
	req, err := client.postBatchUsageEventCreateRequest(ctx, body, options)
	if err != nil {
		return OperationsClientPostBatchUsageEventResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OperationsClientPostBatchUsageEventResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OperationsClientPostBatchUsageEventResponse{}, err
	}
	resp, err := client.postBatchUsageEventHandleResponse(httpResp)
	return resp, err
}

// postBatchUsageEventCreateRequest creates the PostBatchUsageEvent request.
func (client *OperationsClient) postBatchUsageEventCreateRequest(ctx context.Context, body BatchUsageEvent, options *OperationsClientPostBatchUsageEventOptions) (*policy.Request, error) {
	urlPath := "/batchUsageEvent"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-08-31")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.CorrelationID != nil {
		req.Raw().Header["x-ms-correlationid"] = []string{*options.CorrelationID}
	}
	if options != nil && options.RequestID != nil {
		req.Raw().Header["x-ms-requestid"] = []string{*options.RequestID}
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// postBatchUsageEventHandleResponse handles the PostBatchUsageEvent response.
func (client *OperationsClient) postBatchUsageEventHandleResponse(resp *http.Response) (OperationsClientPostBatchUsageEventResponse, error) {
	result := OperationsClientPostBatchUsageEventResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.BatchUsageEventOkResponse); err != nil {
		return OperationsClientPostBatchUsageEventResponse{}, err
	}
	return result, nil
}

// PostUsageEvent - Posts a single usage event to the marketplace metering service API.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2018-08-31
//   - options - OperationsClientPostUsageEventOptions contains the optional parameters for the OperationsClient.PostUsageEvent
//     method.
func (client *OperationsClient) PostUsageEvent(ctx context.Context, body UsageEvent, options *OperationsClientPostUsageEventOptions) (OperationsClientPostUsageEventResponse, error) {
	var err error
	req, err := client.postUsageEventCreateRequest(ctx, body, options)
	if err != nil {
		return OperationsClientPostUsageEventResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return OperationsClientPostUsageEventResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return OperationsClientPostUsageEventResponse{}, err
	}
	resp, err := client.postUsageEventHandleResponse(httpResp)
	return resp, err
}

// postUsageEventCreateRequest creates the PostUsageEvent request.
func (client *OperationsClient) postUsageEventCreateRequest(ctx context.Context, body UsageEvent, options *OperationsClientPostUsageEventOptions) (*policy.Request, error) {
	urlPath := "/usageEvent"
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(	host, urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2018-08-31")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if options != nil && options.CorrelationID != nil {
		req.Raw().Header["x-ms-correlationid"] = []string{*options.CorrelationID}
	}
	if options != nil && options.RequestID != nil {
		req.Raw().Header["x-ms-requestid"] = []string{*options.RequestID}
	}
	if err := runtime.MarshalAsJSON(req, body); err != nil {
	return nil, err
}
	return req, nil
}

// postUsageEventHandleResponse handles the PostUsageEvent response.
func (client *OperationsClient) postUsageEventHandleResponse(resp *http.Response) (OperationsClientPostUsageEventResponse, error) {
	result := OperationsClientPostUsageEventResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.UsageEventOkResponse); err != nil {
		return OperationsClientPostUsageEventResponse{}, err
	}
	return result, nil
}

