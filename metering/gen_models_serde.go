// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package metering

import (
	"encoding/json"
	"fmt"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"reflect"
)

// MarshalJSON implements the json.Marshaller interface for type BatchUsageEvent.
func (b BatchUsageEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "request", b.Request)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BatchUsageEvent.
func (b *BatchUsageEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "request":
				err = unpopulate(val, "Request", &b.Request)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type BatchUsageEventOkResponse.
func (b BatchUsageEventOkResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "count", b.Count)
	populate(objectMap, "result", b.Result)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type BatchUsageEventOkResponse.
func (b *BatchUsageEventOkResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", b, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "count":
				err = unpopulate(val, "Count", &b.Count)
			delete(rawMsg, key)
		case "result":
				err = unpopulate(val, "Result", &b.Result)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", b, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type GetUsageEvent.
func (g GetUsageEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "azureSubscriptionId", g.AzureSubscriptionID)
	populate(objectMap, "dimension", g.Dimension)
	populate(objectMap, "offerId", g.OfferID)
	populate(objectMap, "offerName", g.OfferName)
	populate(objectMap, "offerType", g.OfferType)
	populate(objectMap, "planId", g.PlanID)
	populate(objectMap, "planName", g.PlanName)
	populate(objectMap, "processedQuantity", g.ProcessedQuantity)
	populate(objectMap, "reconStatus", g.ReconStatus)
	populate(objectMap, "submittedCount", g.SubmittedCount)
	populate(objectMap, "submittedQuantity", g.SubmittedQuantity)
	populateDateTimeRFC3339(objectMap, "usageDate", g.UsageDate)
	populate(objectMap, "usageResourceId", g.UsageResourceID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type GetUsageEvent.
func (g *GetUsageEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", g, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "azureSubscriptionId":
				err = unpopulate(val, "AzureSubscriptionID", &g.AzureSubscriptionID)
			delete(rawMsg, key)
		case "dimension":
				err = unpopulate(val, "Dimension", &g.Dimension)
			delete(rawMsg, key)
		case "offerId":
				err = unpopulate(val, "OfferID", &g.OfferID)
			delete(rawMsg, key)
		case "offerName":
				err = unpopulate(val, "OfferName", &g.OfferName)
			delete(rawMsg, key)
		case "offerType":
				err = unpopulate(val, "OfferType", &g.OfferType)
			delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &g.PlanID)
			delete(rawMsg, key)
		case "planName":
				err = unpopulate(val, "PlanName", &g.PlanName)
			delete(rawMsg, key)
		case "processedQuantity":
				err = unpopulate(val, "ProcessedQuantity", &g.ProcessedQuantity)
			delete(rawMsg, key)
		case "reconStatus":
				err = unpopulate(val, "ReconStatus", &g.ReconStatus)
			delete(rawMsg, key)
		case "submittedCount":
				err = unpopulate(val, "SubmittedCount", &g.SubmittedCount)
			delete(rawMsg, key)
		case "submittedQuantity":
				err = unpopulate(val, "SubmittedQuantity", &g.SubmittedQuantity)
			delete(rawMsg, key)
		case "usageDate":
				err = unpopulateDateTimeRFC3339(val, "UsageDate", &g.UsageDate)
			delete(rawMsg, key)
		case "usageResourceId":
				err = unpopulate(val, "UsageResourceID", &g.UsageResourceID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", g, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageBatchEventOkMessage.
func (u UsageBatchEventOkMessage) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "dimension", u.Dimension)
	populateDateTimeRFC3339(objectMap, "effectiveStartTime", u.EffectiveStartTime)
	populate(objectMap, "error", u.Error)
	populateDateTimeRFC3339(objectMap, "messageTime", u.MessageTime)
	populate(objectMap, "planId", u.PlanID)
	populate(objectMap, "quantity", u.Quantity)
	populate(objectMap, "resourceId", u.ResourceID)
	populate(objectMap, "resourceUri", u.ResourceURI)
	populate(objectMap, "status", u.Status)
	populate(objectMap, "usageEventId", u.UsageEventID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageBatchEventOkMessage.
func (u *UsageBatchEventOkMessage) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dimension":
				err = unpopulate(val, "Dimension", &u.Dimension)
			delete(rawMsg, key)
		case "effectiveStartTime":
				err = unpopulateDateTimeRFC3339(val, "EffectiveStartTime", &u.EffectiveStartTime)
			delete(rawMsg, key)
		case "error":
				err = unpopulate(val, "Error", &u.Error)
			delete(rawMsg, key)
		case "messageTime":
				err = unpopulateDateTimeRFC3339(val, "MessageTime", &u.MessageTime)
			delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &u.PlanID)
			delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &u.Quantity)
			delete(rawMsg, key)
		case "resourceId":
				err = unpopulate(val, "ResourceID", &u.ResourceID)
			delete(rawMsg, key)
		case "resourceUri":
				err = unpopulate(val, "ResourceURI", &u.ResourceURI)
			delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &u.Status)
			delete(rawMsg, key)
		case "usageEventId":
				err = unpopulate(val, "UsageEventID", &u.UsageEventID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageEvent.
func (u UsageEvent) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "dimension", u.Dimension)
	populateDateTimeRFC3339(objectMap, "effectiveStartTime", u.EffectiveStartTime)
	populate(objectMap, "planId", u.PlanID)
	populate(objectMap, "quantity", u.Quantity)
	populate(objectMap, "resourceId", u.ResourceID)
	populate(objectMap, "resourceUri", u.ResourceURI)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageEvent.
func (u *UsageEvent) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dimension":
				err = unpopulate(val, "Dimension", &u.Dimension)
			delete(rawMsg, key)
		case "effectiveStartTime":
				err = unpopulateDateTimeRFC3339(val, "EffectiveStartTime", &u.EffectiveStartTime)
			delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &u.PlanID)
			delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &u.Quantity)
			delete(rawMsg, key)
		case "resourceId":
				err = unpopulate(val, "ResourceID", &u.ResourceID)
			delete(rawMsg, key)
		case "resourceUri":
				err = unpopulate(val, "ResourceURI", &u.ResourceURI)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageEventBadRequestResponse.
func (u UsageEventBadRequestResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "code", u.Code)
	populate(objectMap, "details", u.Details)
	populate(objectMap, "message", u.Message)
	populate(objectMap, "target", u.Target)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageEventBadRequestResponse.
func (u *UsageEventBadRequestResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
				err = unpopulate(val, "Code", &u.Code)
			delete(rawMsg, key)
		case "details":
				err = unpopulate(val, "Details", &u.Details)
			delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &u.Message)
			delete(rawMsg, key)
		case "target":
				err = unpopulate(val, "Target", &u.Target)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageEventBadRequestResponseDetail.
func (u UsageEventBadRequestResponseDetail) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "code", u.Code)
	populate(objectMap, "message", u.Message)
	populate(objectMap, "target", u.Target)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageEventBadRequestResponseDetail.
func (u *UsageEventBadRequestResponseDetail) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "code":
				err = unpopulate(val, "Code", &u.Code)
			delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &u.Message)
			delete(rawMsg, key)
		case "target":
				err = unpopulate(val, "Target", &u.Target)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageEventConflictResponse.
func (u UsageEventConflictResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "additionalInfo", u.AdditionalInfo)
	populate(objectMap, "code", u.Code)
	populate(objectMap, "message", u.Message)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageEventConflictResponse.
func (u *UsageEventConflictResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "additionalInfo":
				err = unpopulate(val, "AdditionalInfo", &u.AdditionalInfo)
			delete(rawMsg, key)
		case "code":
				err = unpopulate(val, "Code", &u.Code)
			delete(rawMsg, key)
		case "message":
				err = unpopulate(val, "Message", &u.Message)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageEventConflictResponseAdditionalInfo.
func (u UsageEventConflictResponseAdditionalInfo) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "acceptedMessage", u.AcceptedMessage)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageEventConflictResponseAdditionalInfo.
func (u *UsageEventConflictResponseAdditionalInfo) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "acceptedMessage":
				err = unpopulate(val, "AcceptedMessage", &u.AcceptedMessage)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

// MarshalJSON implements the json.Marshaller interface for type UsageEventOkResponse.
func (u UsageEventOkResponse) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]any)
	populate(objectMap, "dimension", u.Dimension)
	populateDateTimeRFC3339(objectMap, "effectiveStartTime", u.EffectiveStartTime)
	populateDateTimeRFC3339(objectMap, "messageTime", u.MessageTime)
	populate(objectMap, "planId", u.PlanID)
	populate(objectMap, "quantity", u.Quantity)
	populate(objectMap, "resourceId", u.ResourceID)
	populate(objectMap, "resourceUri", u.ResourceURI)
	populate(objectMap, "status", u.Status)
	populate(objectMap, "usageEventId", u.UsageEventID)
	return json.Marshal(objectMap)
}

// UnmarshalJSON implements the json.Unmarshaller interface for type UsageEventOkResponse.
func (u *UsageEventOkResponse) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return fmt.Errorf("unmarshalling type %T: %v", u, err)
	}
	for key, val := range rawMsg {
		var err error
		switch key {
		case "dimension":
				err = unpopulate(val, "Dimension", &u.Dimension)
			delete(rawMsg, key)
		case "effectiveStartTime":
				err = unpopulateDateTimeRFC3339(val, "EffectiveStartTime", &u.EffectiveStartTime)
			delete(rawMsg, key)
		case "messageTime":
				err = unpopulateDateTimeRFC3339(val, "MessageTime", &u.MessageTime)
			delete(rawMsg, key)
		case "planId":
				err = unpopulate(val, "PlanID", &u.PlanID)
			delete(rawMsg, key)
		case "quantity":
				err = unpopulate(val, "Quantity", &u.Quantity)
			delete(rawMsg, key)
		case "resourceId":
				err = unpopulate(val, "ResourceID", &u.ResourceID)
			delete(rawMsg, key)
		case "resourceUri":
				err = unpopulate(val, "ResourceURI", &u.ResourceURI)
			delete(rawMsg, key)
		case "status":
				err = unpopulate(val, "Status", &u.Status)
			delete(rawMsg, key)
		case "usageEventId":
				err = unpopulate(val, "UsageEventID", &u.UsageEventID)
			delete(rawMsg, key)
		}
		if err != nil {
			return fmt.Errorf("unmarshalling type %T: %v", u, err)
		}
	}
	return nil
}

func populate(m map[string]any, k string, v any) {
	if v == nil {
		return
	} else if azcore.IsNullValue(v) {
		m[k] = nil
	} else if !reflect.ValueOf(v).IsNil() {
		m[k] = v
	}
}

func unpopulate(data json.RawMessage, fn string, v any) error {
	if data == nil || string(data) == "null" {
		return nil
	}
	if err := json.Unmarshal(data, v); err != nil {
		return fmt.Errorf("struct field %s: %v", fn, err)
	}
	return nil
}

