//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azurempsaas-fulfillment"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"net/http"
	"net/url"
	"regexp"
)

// OperationsServer is a fake server for instances of the fulfillment.OperationsClient type.
type OperationsServer struct{
	// ActivateSubscription is the fake for method OperationsClient.ActivateSubscription
	// HTTP status codes to indicate success: http.StatusOK
	ActivateSubscription func(ctx context.Context, subscriptionID string, body fulfillment.SubscriberPlan, options *fulfillment.OperationsClientActivateSubscriptionOptions) (resp azfake.Responder[fulfillment.OperationsClientActivateSubscriptionResponse], errResp azfake.ErrorResponder)

	// DeleteSubscription is the fake for method OperationsClient.DeleteSubscription
	// HTTP status codes to indicate success: http.StatusAccepted
	DeleteSubscription func(ctx context.Context, subscriptionID string, options *fulfillment.OperationsClientDeleteSubscriptionOptions) (resp azfake.Responder[fulfillment.OperationsClientDeleteSubscriptionResponse], errResp azfake.ErrorResponder)

	// GetSubscription is the fake for method OperationsClient.GetSubscription
	// HTTP status codes to indicate success: http.StatusOK
	GetSubscription func(ctx context.Context, subscriptionID string, options *fulfillment.OperationsClientGetSubscriptionOptions) (resp azfake.Responder[fulfillment.OperationsClientGetSubscriptionResponse], errResp azfake.ErrorResponder)

	// ListAvailablePlans is the fake for method OperationsClient.ListAvailablePlans
	// HTTP status codes to indicate success: http.StatusOK
	ListAvailablePlans func(ctx context.Context, subscriptionID string, options *fulfillment.OperationsClientListAvailablePlansOptions) (resp azfake.Responder[fulfillment.OperationsClientListAvailablePlansResponse], errResp azfake.ErrorResponder)

	// NewListSubscriptionsPager is the fake for method OperationsClient.NewListSubscriptionsPager
	// HTTP status codes to indicate success: http.StatusOK
	NewListSubscriptionsPager func(options *fulfillment.OperationsClientListSubscriptionsOptions) (resp azfake.PagerResponder[fulfillment.OperationsClientListSubscriptionsResponse])

	// Resolve is the fake for method OperationsClient.Resolve
	// HTTP status codes to indicate success: http.StatusOK
	Resolve func(ctx context.Context, xmsMarketplaceToken string, options *fulfillment.OperationsClientResolveOptions) (resp azfake.Responder[fulfillment.OperationsClientResolveResponse], errResp azfake.ErrorResponder)

	// UpdateSubscription is the fake for method OperationsClient.UpdateSubscription
	// HTTP status codes to indicate success: http.StatusAccepted
	UpdateSubscription func(ctx context.Context, subscriptionID string, body fulfillment.SubscriberPlan, options *fulfillment.OperationsClientUpdateSubscriptionOptions) (resp azfake.Responder[fulfillment.OperationsClientUpdateSubscriptionResponse], errResp azfake.ErrorResponder)

}

// NewOperationsServerTransport creates a new instance of OperationsServerTransport with the provided implementation.
// The returned OperationsServerTransport instance is connected to an instance of fulfillment.OperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewOperationsServerTransport(srv *OperationsServer) *OperationsServerTransport {
	return &OperationsServerTransport{
		srv: srv,
		newListSubscriptionsPager: newTracker[azfake.PagerResponder[fulfillment.OperationsClientListSubscriptionsResponse]](),
	}
}

// OperationsServerTransport connects instances of fulfillment.OperationsClient to instances of OperationsServer.
// Don't use this type directly, use NewOperationsServerTransport instead.
type OperationsServerTransport struct {
	srv *OperationsServer
	newListSubscriptionsPager *tracker[azfake.PagerResponder[fulfillment.OperationsClientListSubscriptionsResponse]]
}

// Do implements the policy.Transporter interface for OperationsServerTransport.
func (o *OperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "OperationsClient.ActivateSubscription":
		resp, err = o.dispatchActivateSubscription(req)
	case "OperationsClient.DeleteSubscription":
		resp, err = o.dispatchDeleteSubscription(req)
	case "OperationsClient.GetSubscription":
		resp, err = o.dispatchGetSubscription(req)
	case "OperationsClient.ListAvailablePlans":
		resp, err = o.dispatchListAvailablePlans(req)
	case "OperationsClient.NewListSubscriptionsPager":
		resp, err = o.dispatchNewListSubscriptionsPager(req)
	case "OperationsClient.Resolve":
		resp, err = o.dispatchResolve(req)
	case "OperationsClient.UpdateSubscription":
		resp, err = o.dispatchUpdateSubscription(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (o *OperationsServerTransport) dispatchActivateSubscription(req *http.Request) (*http.Response, error) {
	if o.srv.ActivateSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method ActivateSubscription not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/activate`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[fulfillment.SubscriberPlan](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientActivateSubscriptionOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientActivateSubscriptionOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := o.srv.ActivateSubscription(req.Context(), subscriptionIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OperationsServerTransport) dispatchDeleteSubscription(req *http.Request) (*http.Response, error) {
	if o.srv.DeleteSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method DeleteSubscription not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientDeleteSubscriptionOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientDeleteSubscriptionOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := o.srv.DeleteSubscription(req.Context(), subscriptionIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).OperationLocationURI; val != nil {
		resp.Header.Set("Operation-Location", *val)
	}
	return resp, nil
}

func (o *OperationsServerTransport) dispatchGetSubscription(req *http.Request) (*http.Response, error) {
	if o.srv.GetSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetSubscription not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientGetSubscriptionOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientGetSubscriptionOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := o.srv.GetSubscription(req.Context(), subscriptionIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Subscription, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OperationsServerTransport) dispatchListAvailablePlans(req *http.Request) (*http.Response, error) {
	if o.srv.ListAvailablePlans == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListAvailablePlans not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/listAvailablePlans`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientListAvailablePlansOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientListAvailablePlansOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := o.srv.ListAvailablePlans(req.Context(), subscriptionIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).SubscriptionPlans, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OperationsServerTransport) dispatchNewListSubscriptionsPager(req *http.Request) (*http.Response, error) {
	if o.srv.NewListSubscriptionsPager == nil {
		return nil, &nonRetriableError{errors.New("fake for method NewListSubscriptionsPager not implemented")}
	}
	newListSubscriptionsPager := o.newListSubscriptionsPager.get(req)
	if newListSubscriptionsPager == nil {
	qp := req.URL.Query()
	continuationTokenUnescaped, err := url.QueryUnescape(qp.Get("continuationToken"))
	if err != nil {
		return nil, err
	}
	continuationTokenParam := getOptional(continuationTokenUnescaped)
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientListSubscriptionsOptions
	if continuationTokenParam != nil || requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientListSubscriptionsOptions{
			ContinuationToken: continuationTokenParam,
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
resp := o.srv.NewListSubscriptionsPager(options)
		newListSubscriptionsPager = &resp
		o.newListSubscriptionsPager.add(req, newListSubscriptionsPager)
		server.PagerResponderInjectNextLinks(newListSubscriptionsPager, req, func(page *fulfillment.OperationsClientListSubscriptionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
	}
	resp, err := server.PagerResponderNext(newListSubscriptionsPager, req)
	if err != nil {
		return nil, err
	}
	if !contains([]int{http.StatusOK}, resp.StatusCode) {
		o.newListSubscriptionsPager.remove(req)
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", resp.StatusCode)}
	}
	if !server.PagerResponderMore(newListSubscriptionsPager) {
		o.newListSubscriptionsPager.remove(req)
	}
	return resp, nil
}

func (o *OperationsServerTransport) dispatchResolve(req *http.Request) (*http.Response, error) {
	if o.srv.Resolve == nil {
		return nil, &nonRetriableError{errors.New("fake for method Resolve not implemented")}
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientResolveOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientResolveOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := o.srv.Resolve(req.Context(), getHeaderValue(req.Header, "x-ms-marketplace-token"), options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).ResolvedSubscription, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (o *OperationsServerTransport) dispatchUpdateSubscription(req *http.Request) (*http.Response, error) {
	if o.srv.UpdateSubscription == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateSubscription not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[fulfillment.SubscriberPlan](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.OperationsClientUpdateSubscriptionOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.OperationsClientUpdateSubscriptionOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := o.srv.UpdateSubscription(req.Context(), subscriptionIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusAccepted}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusAccepted", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	if val := server.GetResponse(respr).OperationLocationURI; val != nil {
		resp.Header.Set("Operation-Location", *val)
	}
	return resp, nil
}

