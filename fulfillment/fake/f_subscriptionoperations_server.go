//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package fake

import (
	"azurempsaas-fulfillment"
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/fake/server"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"regexp"
)

// SubscriptionOperationsServer is a fake server for instances of the fulfillment.SubscriptionOperationsClient type.
type SubscriptionOperationsServer struct{
	// GetOperationStatus is the fake for method SubscriptionOperationsClient.GetOperationStatus
	// HTTP status codes to indicate success: http.StatusOK
	GetOperationStatus func(ctx context.Context, subscriptionID string, operationID string, options *fulfillment.SubscriptionOperationsClientGetOperationStatusOptions) (resp azfake.Responder[fulfillment.SubscriptionOperationsClientGetOperationStatusResponse], errResp azfake.ErrorResponder)

	// ListOperations is the fake for method SubscriptionOperationsClient.ListOperations
	// HTTP status codes to indicate success: http.StatusOK
	ListOperations func(ctx context.Context, subscriptionID string, options *fulfillment.SubscriptionOperationsClientListOperationsOptions) (resp azfake.Responder[fulfillment.SubscriptionOperationsClientListOperationsResponse], errResp azfake.ErrorResponder)

	// UpdateOperationStatus is the fake for method SubscriptionOperationsClient.UpdateOperationStatus
	// HTTP status codes to indicate success: http.StatusOK
	UpdateOperationStatus func(ctx context.Context, subscriptionID string, operationID string, body fulfillment.UpdateOperation, options *fulfillment.SubscriptionOperationsClientUpdateOperationStatusOptions) (resp azfake.Responder[fulfillment.SubscriptionOperationsClientUpdateOperationStatusResponse], errResp azfake.ErrorResponder)

}

// NewSubscriptionOperationsServerTransport creates a new instance of SubscriptionOperationsServerTransport with the provided implementation.
// The returned SubscriptionOperationsServerTransport instance is connected to an instance of fulfillment.SubscriptionOperationsClient via the
// azcore.ClientOptions.Transporter field in the client's constructor parameters.
func NewSubscriptionOperationsServerTransport(srv *SubscriptionOperationsServer) *SubscriptionOperationsServerTransport {
	return &SubscriptionOperationsServerTransport{srv: srv}
}

// SubscriptionOperationsServerTransport connects instances of fulfillment.SubscriptionOperationsClient to instances of SubscriptionOperationsServer.
// Don't use this type directly, use NewSubscriptionOperationsServerTransport instead.
type SubscriptionOperationsServerTransport struct {
	srv *SubscriptionOperationsServer
}

// Do implements the policy.Transporter interface for SubscriptionOperationsServerTransport.
func (s *SubscriptionOperationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SubscriptionOperationsClient.GetOperationStatus":
		resp, err = s.dispatchGetOperationStatus(req)
	case "SubscriptionOperationsClient.ListOperations":
		resp, err = s.dispatchListOperations(req)
	case "SubscriptionOperationsClient.UpdateOperationStatus":
		resp, err = s.dispatchUpdateOperationStatus(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SubscriptionOperationsServerTransport) dispatchGetOperationStatus(req *http.Request) (*http.Response, error) {
	if s.srv.GetOperationStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method GetOperationStatus not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/operations/(?P<operationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	operationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("operationId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.SubscriptionOperationsClientGetOperationStatusOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.SubscriptionOperationsClientGetOperationStatusOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := s.srv.GetOperationStatus(req.Context(), subscriptionIDParam, operationIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).Operation, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SubscriptionOperationsServerTransport) dispatchListOperations(req *http.Request) (*http.Response, error) {
	if s.srv.ListOperations == nil {
		return nil, &nonRetriableError{errors.New("fake for method ListOperations not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/operations`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 1 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.SubscriptionOperationsClientListOperationsOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.SubscriptionOperationsClientListOperationsOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := s.srv.ListOperations(req.Context(), subscriptionIDParam, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.MarshalResponseAsJSON(respContent, server.GetResponse(respr).OperationList, req)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *SubscriptionOperationsServerTransport) dispatchUpdateOperationStatus(req *http.Request) (*http.Response, error) {
	if s.srv.UpdateOperationStatus == nil {
		return nil, &nonRetriableError{errors.New("fake for method UpdateOperationStatus not implemented")}
	}
	const regexStr = `/saas/subscriptions/(?P<subscriptionId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)/operations/(?P<operationId>[!#&$-;=?-\[\]_a-zA-Z0-9~%@]+)`
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.EscapedPath())
	if matches == nil || len(matches) < 2 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := server.UnmarshalRequestAsJSON[fulfillment.UpdateOperation](req)
	if err != nil {
		return nil, err
	}
	subscriptionIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("subscriptionId")])
	if err != nil {
		return nil, err
	}
	operationIDParam, err := url.PathUnescape(matches[regex.SubexpIndex("operationId")])
	if err != nil {
		return nil, err
	}
	requestIDParam := getOptional(getHeaderValue(req.Header, "x-ms-requestid"))
	correlationIDParam := getOptional(getHeaderValue(req.Header, "x-ms-correlationid"))
	var options *fulfillment.SubscriptionOperationsClientUpdateOperationStatusOptions
	if requestIDParam != nil || correlationIDParam != nil {
		options = &fulfillment.SubscriptionOperationsClientUpdateOperationStatusOptions{
			RequestID: requestIDParam,
			CorrelationID: correlationIDParam,
		}
	}
	respr, errRespr := s.srv.UpdateOperationStatus(req.Context(), subscriptionIDParam, operationIDParam, body, options)
	if respErr := server.GetError(errRespr, req); respErr != nil {
		return nil, respErr
	}
	respContent := server.GetResponseContent(respr)
	if !contains([]int{http.StatusOK}, respContent.HTTPStatus) {
		return nil, &nonRetriableError{fmt.Errorf("unexpected status code %d. acceptable values are http.StatusOK", respContent.HTTPStatus)}
	}
	resp, err := server.NewResponse(respContent, req, nil)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

